{"ast":null,"code":"/*!\n * jQuery UI Draggable 1.13.3\n * https://jqueryui.com\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license.\n * https://jquery.org/license\n */\n\n//>>label: Draggable\n//>>group: Interactions\n//>>description: Enables dragging functionality for any element.\n//>>docs: https://api.jqueryui.com/draggable/\n//>>demos: https://jqueryui.com/draggable/\n//>>css.structure: ../../themes/base/draggable.css\n\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./mouse\", \"../data\", \"../plugin\", \"../safe-active-element\", \"../safe-blur\", \"../scroll-parent\", \"../version\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  \"use strict\";\n\n  $.widget(\"ui.draggable\", $.ui.mouse, {\n    version: \"1.13.3\",\n    widgetEventPrefix: \"drag\",\n    options: {\n      addClasses: true,\n      appendTo: \"parent\",\n      axis: false,\n      connectToSortable: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      iframeFix: false,\n      opacity: false,\n      refreshPositions: false,\n      revert: false,\n      revertDuration: 500,\n      scope: \"default\",\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      snap: false,\n      snapMode: \"both\",\n      snapTolerance: 20,\n      stack: false,\n      zIndex: false,\n      // Callbacks\n      drag: null,\n      start: null,\n      stop: null\n    },\n    _create: function () {\n      if (this.options.helper === \"original\") {\n        this._setPositionRelative();\n      }\n      if (this.options.addClasses) {\n        this._addClass(\"ui-draggable\");\n      }\n      this._setHandleClassName();\n      this._mouseInit();\n    },\n    _setOption: function (key, value) {\n      this._super(key, value);\n      if (key === \"handle\") {\n        this._removeHandleClassName();\n        this._setHandleClassName();\n      }\n    },\n    _destroy: function () {\n      if ((this.helper || this.element).is(\".ui-draggable-dragging\")) {\n        this.destroyOnClear = true;\n        return;\n      }\n      this._removeHandleClassName();\n      this._mouseDestroy();\n    },\n    _mouseCapture: function (event) {\n      var o = this.options;\n\n      // Among others, prevent a drag on a resizable-handle\n      if (this.helper || o.disabled || $(event.target).closest(\".ui-resizable-handle\").length > 0) {\n        return false;\n      }\n\n      //Quit if we're not on a valid handle\n      this.handle = this._getHandle(event);\n      if (!this.handle) {\n        return false;\n      }\n      this._blurActiveElement(event);\n      this._blockFrames(o.iframeFix === true ? \"iframe\" : o.iframeFix);\n      return true;\n    },\n    _blockFrames: function (selector) {\n      this.iframeBlocks = this.document.find(selector).map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css(\"position\", \"absolute\").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function () {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _blurActiveElement: function (event) {\n      var activeElement = $.ui.safeActiveElement(this.document[0]),\n        target = $(event.target);\n\n      // Don't blur if the event occurred on an element that is within\n      // the currently focused element\n      // See #10527, #12472\n      if (target.closest(activeElement).length) {\n        return;\n      }\n\n      // Blur any element that currently has focus, see #4261\n      $.ui.safeBlur(activeElement);\n    },\n    _mouseStart: function (event) {\n      var o = this.options;\n\n      //Create and append the visible helper\n      this.helper = this._createHelper(event);\n      this._addClass(this.helper, \"ui-draggable-dragging\");\n\n      //Cache the helper size\n      this._cacheHelperProportions();\n\n      //If ddmanager is used for droppables, set the global draggable\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n\n      /*\n       * - Position generation -\n       * This block generates everything position related - it's the core of draggables.\n       */\n\n      //Cache the margins of the original element\n      this._cacheMargins();\n\n      //Store the helper's css position\n      this.cssPosition = this.helper.css(\"position\");\n      this.scrollParent = this.helper.scrollParent(true);\n      this.offsetParent = this.helper.offsetParent();\n      this.hasFixedAncestor = this.helper.parents().filter(function () {\n        return $(this).css(\"position\") === \"fixed\";\n      }).length > 0;\n\n      //The element's absolute position on the page minus margins\n      this.positionAbs = this.element.offset();\n      this._refreshOffsets(event);\n\n      //Generate the original position\n      this.originalPosition = this.position = this._generatePosition(event, false);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY;\n\n      //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n      if (o.cursorAt) {\n        this._adjustOffsetFromHelper(o.cursorAt);\n      }\n\n      //Set a containment if given in the options\n      this._setContainment();\n\n      //Trigger event + callbacks\n      if (this._trigger(\"start\", event) === false) {\n        this._clear();\n        return false;\n      }\n\n      //Recache the helper size\n      this._cacheHelperProportions();\n\n      //Prepare the droppable offsets\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      }\n\n      // Execute the drag once - this causes the helper not to be visible before getting its\n      // correct position\n      this._mouseDrag(event, true);\n\n      // If the ddmanager is used for droppables, inform the manager that dragging has started\n      // (see #5003)\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStart(this, event);\n      }\n      return true;\n    },\n    _refreshOffsets: function (event) {\n      this.offset = {\n        top: this.positionAbs.top - this.margins.top,\n        left: this.positionAbs.left - this.margins.left,\n        scroll: false,\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset()\n      };\n      this.offset.click = {\n        left: event.pageX - this.offset.left,\n        top: event.pageY - this.offset.top\n      };\n    },\n    _mouseDrag: function (event, noPropagation) {\n      // reset any necessary cached properties (see #5009)\n      if (this.hasFixedAncestor) {\n        this.offset.parent = this._getParentOffset();\n      }\n\n      //Compute the helpers position\n      this.position = this._generatePosition(event, true);\n      this.positionAbs = this._convertPositionTo(\"absolute\");\n\n      //Call plugins and callbacks and use the resulting position if something is returned\n      if (!noPropagation) {\n        var ui = this._uiHash();\n        if (this._trigger(\"drag\", event, ui) === false) {\n          this._mouseUp(new $.Event(\"mouseup\", event));\n          return false;\n        }\n        this.position = ui.position;\n      }\n      this.helper[0].style.left = this.position.left + \"px\";\n      this.helper[0].style.top = this.position.top + \"px\";\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      }\n      return false;\n    },\n    _mouseStop: function (event) {\n      //If we are using droppables, inform the manager about the drop\n      var that = this,\n        dropped = false;\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        dropped = $.ui.ddmanager.drop(this, event);\n      }\n\n      //if a drop comes from outside (a sortable)\n      if (this.dropped) {\n        dropped = this.dropped;\n        this.dropped = false;\n      }\n      if (this.options.revert === \"invalid\" && !dropped || this.options.revert === \"valid\" && dropped || this.options.revert === true || typeof this.options.revert === \"function\" && this.options.revert.call(this.element, dropped)) {\n        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {\n          if (that._trigger(\"stop\", event) !== false) {\n            that._clear();\n          }\n        });\n      } else {\n        if (this._trigger(\"stop\", event) !== false) {\n          this._clear();\n        }\n      }\n      return false;\n    },\n    _mouseUp: function (event) {\n      this._unblockFrames();\n\n      // If the ddmanager is used for droppables, inform the manager that dragging has stopped\n      // (see #5003)\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStop(this, event);\n      }\n\n      // Only need to focus if the event occurred on the draggable itself, see #10527\n      if (this.handleElement.is(event.target)) {\n        // The interaction is over; whether or not the click resulted in a drag,\n        // focus the element\n        this.element.trigger(\"focus\");\n      }\n      return $.ui.mouse.prototype._mouseUp.call(this, event);\n    },\n    cancel: function () {\n      if (this.helper.is(\".ui-draggable-dragging\")) {\n        this._mouseUp(new $.Event(\"mouseup\", {\n          target: this.element[0]\n        }));\n      } else {\n        this._clear();\n      }\n      return this;\n    },\n    _getHandle: function (event) {\n      return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;\n    },\n    _setHandleClassName: function () {\n      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;\n      this._addClass(this.handleElement, \"ui-draggable-handle\");\n    },\n    _removeHandleClassName: function () {\n      this._removeClass(this.handleElement, \"ui-draggable-handle\");\n    },\n    _createHelper: function (event) {\n      var o = this.options,\n        helperIsFunction = typeof o.helper === \"function\",\n        helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === \"clone\" ? this.element.clone().removeAttr(\"id\") : this.element;\n      if (!helper.parents(\"body\").length) {\n        helper.appendTo(o.appendTo === \"parent\" ? this.element[0].parentNode : o.appendTo);\n      }\n\n      // https://bugs.jqueryui.com/ticket/9446\n      // a helper function can return the original element\n      // which wouldn't have been set to relative in _create\n      if (helperIsFunction && helper[0] === this.element[0]) {\n        this._setPositionRelative();\n      }\n      if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css(\"position\"))) {\n        helper.css(\"position\", \"absolute\");\n      }\n      return helper;\n    },\n    _setPositionRelative: function () {\n      if (!/^(?:r|a|f)/.test(this.element.css(\"position\"))) {\n        this.element[0].style.position = \"relative\";\n      }\n    },\n    _adjustOffsetFromHelper: function (obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n      if (Array.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _isRootNode: function (element) {\n      return /(html|body)/i.test(element.tagName) || element === this.document[0];\n    },\n    _getParentOffset: function () {\n      //Get the offsetParent and cache its position\n      var po = this.offsetParent.offset(),\n        document = this.document[0];\n\n      // This is a special case where we need to modify a offset calculated on start, since the\n      // following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the\n      // next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n      // the document, which means that the scroll is included in the initial calculation of the\n      // offset of the parent, and never recalculated upon drag\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      }\n      if (this._isRootNode(this.offsetParent[0])) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function () {\n      if (this.cssPosition !== \"relative\") {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n      var p = this.element.position(),\n        scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n      return {\n        top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),\n        left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)\n      };\n    },\n    _cacheMargins: function () {\n      this.margins = {\n        left: parseInt(this.element.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.element.css(\"marginTop\"), 10) || 0,\n        right: parseInt(this.element.css(\"marginRight\"), 10) || 0,\n        bottom: parseInt(this.element.css(\"marginBottom\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function () {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function () {\n      var isUserScrollable,\n        c,\n        ce,\n        o = this.options,\n        document = this.document[0];\n      this.relativeContainer = null;\n      if (!o.containment) {\n        this.containment = null;\n        return;\n      }\n      if (o.containment === \"window\") {\n        this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n        return;\n      }\n      if (o.containment === \"document\") {\n        this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n        return;\n      }\n      if (o.containment.constructor === Array) {\n        this.containment = o.containment;\n        return;\n      }\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n      c = $(o.containment);\n      ce = c[0];\n      if (!ce) {\n        return;\n      }\n      isUserScrollable = /(scroll|auto)/.test(c.css(\"overflow\"));\n      this.containment = [(parseInt(c.css(\"borderLeftWidth\"), 10) || 0) + (parseInt(c.css(\"paddingLeft\"), 10) || 0), (parseInt(c.css(\"borderTopWidth\"), 10) || 0) + (parseInt(c.css(\"paddingTop\"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css(\"borderRightWidth\"), 10) || 0) - (parseInt(c.css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css(\"borderBottomWidth\"), 10) || 0) - (parseInt(c.css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];\n      this.relativeContainer = c;\n    },\n    _convertPositionTo: function (d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n      var mod = d === \"absolute\" ? 1 : -1,\n        scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n      return {\n        top:\n        // The absolute mouse position\n        pos.top +\n        // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.top * mod +\n        // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.top * mod - (this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,\n        left:\n        // The absolute mouse position\n        pos.left +\n        // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.left * mod +\n        // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.left * mod - (this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod\n      };\n    },\n    _generatePosition: function (event, constrainPosition) {\n      var containment,\n        co,\n        top,\n        left,\n        o = this.options,\n        scrollIsRootNode = this._isRootNode(this.scrollParent[0]),\n        pageX = event.pageX,\n        pageY = event.pageY;\n\n      // Cache the scroll\n      if (!scrollIsRootNode || !this.offset.scroll) {\n        this.offset.scroll = {\n          top: this.scrollParent.scrollTop(),\n          left: this.scrollParent.scrollLeft()\n        };\n      }\n\n      /*\n       * - Position constraining -\n       * Constrain the position to a mix of grid, containment.\n       */\n\n      // If we are not dragging yet, we won't check for options\n      if (constrainPosition) {\n        if (this.containment) {\n          if (this.relativeContainer) {\n            co = this.relativeContainer.offset();\n            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];\n          } else {\n            containment = this.containment;\n          }\n          if (event.pageX - this.offset.click.left < containment[0]) {\n            pageX = containment[0] + this.offset.click.left;\n          }\n          if (event.pageY - this.offset.click.top < containment[1]) {\n            pageY = containment[1] + this.offset.click.top;\n          }\n          if (event.pageX - this.offset.click.left > containment[2]) {\n            pageX = containment[2] + this.offset.click.left;\n          }\n          if (event.pageY - this.offset.click.top > containment[3]) {\n            pageY = containment[3] + this.offset.click.top;\n          }\n        }\n        if (o.grid) {\n          //Check for grid elements set to 0 to prevent divide by 0 error causing invalid\n          // argument errors in IE (see ticket #6950)\n          top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;\n          pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;\n          pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n        if (o.axis === \"y\") {\n          pageX = this.originalPageX;\n        }\n        if (o.axis === \"x\") {\n          pageY = this.originalPageY;\n        }\n      }\n      return {\n        top:\n        // The absolute mouse position\n        pageY -\n        // Click offset (relative to the element)\n        this.offset.click.top -\n        // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.top -\n        // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.top + (this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),\n        left:\n        // The absolute mouse position\n        pageX -\n        // Click offset (relative to the element)\n        this.offset.click.left -\n        // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.left -\n        // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.left + (this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)\n      };\n    },\n    _clear: function () {\n      this._removeClass(this.helper, \"ui-draggable-dragging\");\n      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {\n        this.helper.remove();\n      }\n      this.helper = null;\n      this.cancelHelperRemoval = false;\n      if (this.destroyOnClear) {\n        this.destroy();\n      }\n    },\n    // From now on bulk stuff - mainly helpers\n\n    _trigger: function (type, event, ui) {\n      ui = ui || this._uiHash();\n      $.ui.plugin.call(this, type, [event, ui, this], true);\n\n      // Absolute position and offset (see #6884 ) have to be recalculated after plugins\n      if (/^(drag|start|stop)/.test(type)) {\n        this.positionAbs = this._convertPositionTo(\"absolute\");\n        ui.offset = this.positionAbs;\n      }\n      return $.Widget.prototype._trigger.call(this, type, event, ui);\n    },\n    plugins: {},\n    _uiHash: function () {\n      return {\n        helper: this.helper,\n        position: this.position,\n        originalPosition: this.originalPosition,\n        offset: this.positionAbs\n      };\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"connectToSortable\", {\n    start: function (event, ui, draggable) {\n      var uiSortable = $.extend({}, ui, {\n        item: draggable.element\n      });\n      draggable.sortables = [];\n      $(draggable.options.connectToSortable).each(function () {\n        var sortable = $(this).sortable(\"instance\");\n        if (sortable && !sortable.options.disabled) {\n          draggable.sortables.push(sortable);\n\n          // RefreshPositions is called at drag start to refresh the containerCache\n          // which is used in drag. This ensures it's initialized and synchronized\n          // with any changes that might have happened on the page since initialization.\n          sortable.refreshPositions();\n          sortable._trigger(\"activate\", event, uiSortable);\n        }\n      });\n    },\n    stop: function (event, ui, draggable) {\n      var uiSortable = $.extend({}, ui, {\n        item: draggable.element\n      });\n      draggable.cancelHelperRemoval = false;\n      $.each(draggable.sortables, function () {\n        var sortable = this;\n        if (sortable.isOver) {\n          sortable.isOver = 0;\n\n          // Allow this sortable to handle removing the helper\n          draggable.cancelHelperRemoval = true;\n          sortable.cancelHelperRemoval = false;\n\n          // Use _storedCSS To restore properties in the sortable,\n          // as this also handles revert (#9675) since the draggable\n          // may have modified them in unexpected ways (#8809)\n          sortable._storedCSS = {\n            position: sortable.placeholder.css(\"position\"),\n            top: sortable.placeholder.css(\"top\"),\n            left: sortable.placeholder.css(\"left\")\n          };\n          sortable._mouseStop(event);\n\n          // Once drag has ended, the sortable should return to using\n          // its original helper, not the shared helper from draggable\n          sortable.options.helper = sortable.options._helper;\n        } else {\n          // Prevent this Sortable from removing the helper.\n          // However, don't set the draggable to remove the helper\n          // either as another connected Sortable may yet handle the removal.\n          sortable.cancelHelperRemoval = true;\n          sortable._trigger(\"deactivate\", event, uiSortable);\n        }\n      });\n    },\n    drag: function (event, ui, draggable) {\n      $.each(draggable.sortables, function () {\n        var innermostIntersecting = false,\n          sortable = this;\n\n        // Copy over variables that sortable's _intersectsWith uses\n        sortable.positionAbs = draggable.positionAbs;\n        sortable.helperProportions = draggable.helperProportions;\n        sortable.offset.click = draggable.offset.click;\n        if (sortable._intersectsWith(sortable.containerCache)) {\n          innermostIntersecting = true;\n          $.each(draggable.sortables, function () {\n            // Copy over variables that sortable's _intersectsWith uses\n            this.positionAbs = draggable.positionAbs;\n            this.helperProportions = draggable.helperProportions;\n            this.offset.click = draggable.offset.click;\n            if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {\n              innermostIntersecting = false;\n            }\n            return innermostIntersecting;\n          });\n        }\n        if (innermostIntersecting) {\n          // If it intersects, we use a little isOver variable and set it once,\n          // so that the move-in stuff gets fired only once.\n          if (!sortable.isOver) {\n            sortable.isOver = 1;\n\n            // Store draggable's parent in case we need to reappend to it later.\n            draggable._parent = ui.helper.parent();\n            sortable.currentItem = ui.helper.appendTo(sortable.element).data(\"ui-sortable-item\", true);\n\n            // Store helper option to later restore it\n            sortable.options._helper = sortable.options.helper;\n            sortable.options.helper = function () {\n              return ui.helper[0];\n            };\n\n            // Fire the start events of the sortable with our passed browser event,\n            // and our own helper (so it doesn't create a new one)\n            event.target = sortable.currentItem[0];\n            sortable._mouseCapture(event, true);\n            sortable._mouseStart(event, true, true);\n\n            // Because the browser event is way off the new appended portlet,\n            // modify necessary variables to reflect the changes\n            sortable.offset.click.top = draggable.offset.click.top;\n            sortable.offset.click.left = draggable.offset.click.left;\n            sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;\n            sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;\n            draggable._trigger(\"toSortable\", event);\n\n            // Inform draggable that the helper is in a valid drop zone,\n            // used solely in the revert option to handle \"valid/invalid\".\n            draggable.dropped = sortable.element;\n\n            // Need to refreshPositions of all sortables in the case that\n            // adding to one sortable changes the location of the other sortables (#9675)\n            $.each(draggable.sortables, function () {\n              this.refreshPositions();\n            });\n\n            // Hack so receive/update callbacks work (mostly)\n            draggable.currentItem = draggable.element;\n            sortable.fromOutside = draggable;\n          }\n          if (sortable.currentItem) {\n            sortable._mouseDrag(event);\n\n            // Copy the sortable's position because the draggable's can potentially reflect\n            // a relative position, while sortable is always absolute, which the dragged\n            // element has now become. (#8809)\n            ui.position = sortable.position;\n          }\n        } else {\n          // If it doesn't intersect with the sortable, and it intersected before,\n          // we fake the drag stop of the sortable, but make sure it doesn't remove\n          // the helper by using cancelHelperRemoval.\n          if (sortable.isOver) {\n            sortable.isOver = 0;\n            sortable.cancelHelperRemoval = true;\n\n            // Calling sortable's mouseStop would trigger a revert,\n            // so revert must be temporarily false until after mouseStop is called.\n            sortable.options._revert = sortable.options.revert;\n            sortable.options.revert = false;\n            sortable._trigger(\"out\", event, sortable._uiHash(sortable));\n            sortable._mouseStop(event, true);\n\n            // Restore sortable behaviors that were modfied\n            // when the draggable entered the sortable area (#9481)\n            sortable.options.revert = sortable.options._revert;\n            sortable.options.helper = sortable.options._helper;\n            if (sortable.placeholder) {\n              sortable.placeholder.remove();\n            }\n\n            // Restore and recalculate the draggable's offset considering the sortable\n            // may have modified them in unexpected ways. (#8809, #10669)\n            ui.helper.appendTo(draggable._parent);\n            draggable._refreshOffsets(event);\n            ui.position = draggable._generatePosition(event, true);\n            draggable._trigger(\"fromSortable\", event);\n\n            // Inform draggable that the helper is no longer in a valid drop zone\n            draggable.dropped = false;\n\n            // Need to refreshPositions of all sortables just in case removing\n            // from one sortable changes the location of other sortables (#9675)\n            $.each(draggable.sortables, function () {\n              this.refreshPositions();\n            });\n          }\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"cursor\", {\n    start: function (event, ui, instance) {\n      var t = $(\"body\"),\n        o = instance.options;\n      if (t.css(\"cursor\")) {\n        o._cursor = t.css(\"cursor\");\n      }\n      t.css(\"cursor\", o.cursor);\n    },\n    stop: function (event, ui, instance) {\n      var o = instance.options;\n      if (o._cursor) {\n        $(\"body\").css(\"cursor\", o._cursor);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"opacity\", {\n    start: function (event, ui, instance) {\n      var t = $(ui.helper),\n        o = instance.options;\n      if (t.css(\"opacity\")) {\n        o._opacity = t.css(\"opacity\");\n      }\n      t.css(\"opacity\", o.opacity);\n    },\n    stop: function (event, ui, instance) {\n      var o = instance.options;\n      if (o._opacity) {\n        $(ui.helper).css(\"opacity\", o._opacity);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"scroll\", {\n    start: function (event, ui, i) {\n      if (!i.scrollParentNotHidden) {\n        i.scrollParentNotHidden = i.helper.scrollParent(false);\n      }\n      if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== \"HTML\") {\n        i.overflowOffset = i.scrollParentNotHidden.offset();\n      }\n    },\n    drag: function (event, ui, i) {\n      var o = i.options,\n        scrolled = false,\n        scrollParent = i.scrollParentNotHidden[0],\n        document = i.document[0];\n      if (scrollParent !== document && scrollParent.tagName !== \"HTML\") {\n        if (!o.axis || o.axis !== \"x\") {\n          if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {\n            scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;\n          } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {\n            scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;\n          }\n        }\n        if (!o.axis || o.axis !== \"y\") {\n          if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {\n            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {\n            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;\n          }\n        }\n      } else {\n        if (!o.axis || o.axis !== \"x\") {\n          if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n          } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n          }\n        }\n        if (!o.axis || o.axis !== \"y\") {\n          if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n          } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n          }\n        }\n      }\n      if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(i, event);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"snap\", {\n    start: function (event, ui, i) {\n      var o = i.options;\n      i.snapElements = [];\n      $(o.snap.constructor !== String ? o.snap.items || \":data(ui-draggable)\" : o.snap).each(function () {\n        var $t = $(this),\n          $o = $t.offset();\n        if (this !== i.element[0]) {\n          i.snapElements.push({\n            item: this,\n            width: $t.outerWidth(),\n            height: $t.outerHeight(),\n            top: $o.top,\n            left: $o.left\n          });\n        }\n      });\n    },\n    drag: function (event, ui, inst) {\n      var ts,\n        bs,\n        ls,\n        rs,\n        l,\n        r,\n        t,\n        b,\n        i,\n        first,\n        o = inst.options,\n        d = o.snapTolerance,\n        x1 = ui.offset.left,\n        x2 = x1 + inst.helperProportions.width,\n        y1 = ui.offset.top,\n        y2 = y1 + inst.helperProportions.height;\n      for (i = inst.snapElements.length - 1; i >= 0; i--) {\n        l = inst.snapElements[i].left - inst.margins.left;\n        r = l + inst.snapElements[i].width;\n        t = inst.snapElements[i].top - inst.margins.top;\n        b = t + inst.snapElements[i].height;\n        if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {\n          if (inst.snapElements[i].snapping) {\n            if (inst.options.snap.release) {\n              inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {\n                snapItem: inst.snapElements[i].item\n              }));\n            }\n          }\n          inst.snapElements[i].snapping = false;\n          continue;\n        }\n        if (o.snapMode !== \"inner\") {\n          ts = Math.abs(t - y2) <= d;\n          bs = Math.abs(b - y1) <= d;\n          ls = Math.abs(l - x2) <= d;\n          rs = Math.abs(r - x1) <= d;\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t - inst.helperProportions.height,\n              left: 0\n            }).top;\n          }\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b,\n              left: 0\n            }).top;\n          }\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l - inst.helperProportions.width\n            }).left;\n          }\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r\n            }).left;\n          }\n        }\n        first = ts || bs || ls || rs;\n        if (o.snapMode !== \"outer\") {\n          ts = Math.abs(t - y1) <= d;\n          bs = Math.abs(b - y2) <= d;\n          ls = Math.abs(l - x1) <= d;\n          rs = Math.abs(r - x2) <= d;\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t,\n              left: 0\n            }).top;\n          }\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b - inst.helperProportions.height,\n              left: 0\n            }).top;\n          }\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l\n            }).left;\n          }\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r - inst.helperProportions.width\n            }).left;\n          }\n        }\n        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {\n          if (inst.options.snap.snap) {\n            inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {\n              snapItem: inst.snapElements[i].item\n            }));\n          }\n        }\n        inst.snapElements[i].snapping = ts || bs || ls || rs || first;\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"stack\", {\n    start: function (event, ui, instance) {\n      var min,\n        o = instance.options,\n        group = $.makeArray($(o.stack)).sort(function (a, b) {\n          return (parseInt($(a).css(\"zIndex\"), 10) || 0) - (parseInt($(b).css(\"zIndex\"), 10) || 0);\n        });\n      if (!group.length) {\n        return;\n      }\n      min = parseInt($(group[0]).css(\"zIndex\"), 10) || 0;\n      $(group).each(function (i) {\n        $(this).css(\"zIndex\", min + i);\n      });\n      this.css(\"zIndex\", min + group.length);\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"zIndex\", {\n    start: function (event, ui, instance) {\n      var t = $(ui.helper),\n        o = instance.options;\n      if (t.css(\"zIndex\")) {\n        o._zIndex = t.css(\"zIndex\");\n      }\n      t.css(\"zIndex\", o.zIndex);\n    },\n    stop: function (event, ui, instance) {\n      var o = instance.options;\n      if (o._zIndex) {\n        $(ui.helper).css(\"zIndex\", o._zIndex);\n      }\n    }\n  });\n  return $.ui.draggable;\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}