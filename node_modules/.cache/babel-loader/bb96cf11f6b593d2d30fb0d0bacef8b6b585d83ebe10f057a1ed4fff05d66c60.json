{"ast":null,"code":"/*!\n * jQuery UI Droppable 1.13.3\n * https://jqueryui.com\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license.\n * https://jquery.org/license\n */\n\n//>>label: Droppable\n//>>group: Interactions\n//>>description: Enables drop targets for draggable elements.\n//>>docs: https://api.jqueryui.com/droppable/\n//>>demos: https://jqueryui.com/droppable/\n\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./draggable\", \"./mouse\", \"../version\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  \"use strict\";\n\n  $.widget(\"ui.droppable\", {\n    version: \"1.13.3\",\n    widgetEventPrefix: \"drop\",\n    options: {\n      accept: \"*\",\n      addClasses: true,\n      greedy: false,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      // Callbacks\n      activate: null,\n      deactivate: null,\n      drop: null,\n      out: null,\n      over: null\n    },\n    _create: function () {\n      var proportions,\n        o = this.options,\n        accept = o.accept;\n      this.isover = false;\n      this.isout = true;\n      this.accept = typeof accept === \"function\" ? accept : function (d) {\n        return d.is(accept);\n      };\n      this.proportions = function /* valueToWrite */\n      () {\n        if (arguments.length) {\n          // Store the droppable's proportions\n          proportions = arguments[0];\n        } else {\n          // Retrieve or derive the droppable's proportions\n          return proportions ? proportions : proportions = {\n            width: this.element[0].offsetWidth,\n            height: this.element[0].offsetHeight\n          };\n        }\n      };\n      this._addToManager(o.scope);\n      if (o.addClasses) {\n        this._addClass(\"ui-droppable\");\n      }\n    },\n    _addToManager: function (scope) {\n      // Add the reference and positions to the manager\n      $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];\n      $.ui.ddmanager.droppables[scope].push(this);\n    },\n    _splice: function (drop) {\n      var i = 0;\n      for (; i < drop.length; i++) {\n        if (drop[i] === this) {\n          drop.splice(i, 1);\n        }\n      }\n    },\n    _destroy: function () {\n      var drop = $.ui.ddmanager.droppables[this.options.scope];\n      this._splice(drop);\n    },\n    _setOption: function (key, value) {\n      if (key === \"accept\") {\n        this.accept = typeof value === \"function\" ? value : function (d) {\n          return d.is(value);\n        };\n      } else if (key === \"scope\") {\n        var drop = $.ui.ddmanager.droppables[this.options.scope];\n        this._splice(drop);\n        this._addToManager(value);\n      }\n      this._super(key, value);\n    },\n    _activate: function (event) {\n      var draggable = $.ui.ddmanager.current;\n      this._addActiveClass();\n      if (draggable) {\n        this._trigger(\"activate\", event, this.ui(draggable));\n      }\n    },\n    _deactivate: function (event) {\n      var draggable = $.ui.ddmanager.current;\n      this._removeActiveClass();\n      if (draggable) {\n        this._trigger(\"deactivate\", event, this.ui(draggable));\n      }\n    },\n    _over: function (event) {\n      var draggable = $.ui.ddmanager.current;\n\n      // Bail if draggable and droppable are same element\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        this._addHoverClass();\n        this._trigger(\"over\", event, this.ui(draggable));\n      }\n    },\n    _out: function (event) {\n      var draggable = $.ui.ddmanager.current;\n\n      // Bail if draggable and droppable are same element\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        this._removeHoverClass();\n        this._trigger(\"out\", event, this.ui(draggable));\n      }\n    },\n    _drop: function (event, custom) {\n      var draggable = custom || $.ui.ddmanager.current,\n        childrenIntersection = false;\n\n      // Bail if draggable and droppable are same element\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return false;\n      }\n      this.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function () {\n        var inst = $(this).droppable(\"instance\");\n        if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {\n          offset: inst.element.offset()\n        }), inst.options.tolerance, event)) {\n          childrenIntersection = true;\n          return false;\n        }\n      });\n      if (childrenIntersection) {\n        return false;\n      }\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        this._removeActiveClass();\n        this._removeHoverClass();\n        this._trigger(\"drop\", event, this.ui(draggable));\n        return this.element;\n      }\n      return false;\n    },\n    ui: function (c) {\n      return {\n        draggable: c.currentItem || c.element,\n        helper: c.helper,\n        position: c.position,\n        offset: c.positionAbs\n      };\n    },\n    // Extension points just to make backcompat sane and avoid duplicating logic\n    // TODO: Remove in 1.14 along with call to it below\n    _addHoverClass: function () {\n      this._addClass(\"ui-droppable-hover\");\n    },\n    _removeHoverClass: function () {\n      this._removeClass(\"ui-droppable-hover\");\n    },\n    _addActiveClass: function () {\n      this._addClass(\"ui-droppable-active\");\n    },\n    _removeActiveClass: function () {\n      this._removeClass(\"ui-droppable-active\");\n    }\n  });\n  $.ui.intersect = function () {\n    function isOverAxis(x, reference, size) {\n      return x >= reference && x < reference + size;\n    }\n    return function (draggable, droppable, toleranceMode, event) {\n      if (!droppable.offset) {\n        return false;\n      }\n      var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left,\n        y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top,\n        x2 = x1 + draggable.helperProportions.width,\n        y2 = y1 + draggable.helperProportions.height,\n        l = droppable.offset.left,\n        t = droppable.offset.top,\n        r = l + droppable.proportions().width,\n        b = t + droppable.proportions().height;\n      switch (toleranceMode) {\n        case \"fit\":\n          return l <= x1 && x2 <= r && t <= y1 && y2 <= b;\n        case \"intersect\":\n          return l < x1 + draggable.helperProportions.width / 2 &&\n          // Right Half\n          x2 - draggable.helperProportions.width / 2 < r &&\n          // Left Half\n          t < y1 + draggable.helperProportions.height / 2 &&\n          // Bottom Half\n          y2 - draggable.helperProportions.height / 2 < b;\n        // Top Half\n        case \"pointer\":\n          return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);\n        case \"touch\":\n          return (y1 >= t && y1 <= b ||\n          // Top edge touching\n          y2 >= t && y2 <= b ||\n          // Bottom edge touching\n          y1 < t && y2 > b // Surrounded vertically\n          ) && (x1 >= l && x1 <= r ||\n          // Left edge touching\n          x2 >= l && x2 <= r ||\n          // Right edge touching\n          x1 < l && x2 > r // Surrounded horizontally\n          );\n        default:\n          return false;\n      }\n    };\n  }();\n\n  /*\n  \tThis manager tracks offsets of draggables and droppables\n  */\n  $.ui.ddmanager = {\n    current: null,\n    droppables: {\n      \"default\": []\n    },\n    prepareOffsets: function (t, event) {\n      var i,\n        j,\n        m = $.ui.ddmanager.droppables[t.options.scope] || [],\n        type = event ? event.type : null,\n        // workaround for #2317\n        list = (t.currentItem || t.element).find(\":data(ui-droppable)\").addBack();\n      droppablesLoop: for (i = 0; i < m.length; i++) {\n        // No disabled and non-accepted\n        if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {\n          continue;\n        }\n\n        // Filter out elements in the current dragged item\n        for (j = 0; j < list.length; j++) {\n          if (list[j] === m[i].element[0]) {\n            m[i].proportions().height = 0;\n            continue droppablesLoop;\n          }\n        }\n        m[i].visible = m[i].element.css(\"display\") !== \"none\";\n        if (!m[i].visible) {\n          continue;\n        }\n\n        // Activate the droppable if used directly from draggables\n        if (type === \"mousedown\") {\n          m[i]._activate.call(m[i], event);\n        }\n        m[i].offset = m[i].element.offset();\n        m[i].proportions({\n          width: m[i].element[0].offsetWidth,\n          height: m[i].element[0].offsetHeight\n        });\n      }\n    },\n    drop: function (draggable, event) {\n      var dropped = false;\n\n      // Create a copy of the droppables in case the list changes during the drop (#9116)\n      $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {\n        if (!this.options) {\n          return;\n        }\n        if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event)) {\n          dropped = this._drop.call(this, event) || dropped;\n        }\n        if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n          this.isout = true;\n          this.isover = false;\n          this._deactivate.call(this, event);\n        }\n      });\n      return dropped;\n    },\n    dragStart: function (draggable, event) {\n      // Listen for scrolling so that if the dragging causes scrolling the position of the\n      // droppables can be recalculated (see #5003)\n      draggable.element.parentsUntil(\"body\").on(\"scroll.droppable\", function () {\n        if (!draggable.options.refreshPositions) {\n          $.ui.ddmanager.prepareOffsets(draggable, event);\n        }\n      });\n    },\n    drag: function (draggable, event) {\n      // If you have a highly dynamic page, you might try this option. It renders positions\n      // every time you move the mouse.\n      if (draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      }\n\n      // Run through all droppables and check their positions based on specific tolerance options\n      $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n        if (this.options.disabled || this.greedyChild || !this.visible) {\n          return;\n        }\n        var parentInstance,\n          scope,\n          parent,\n          intersects = $.ui.intersect(draggable, this, this.options.tolerance, event),\n          c = !intersects && this.isover ? \"isout\" : intersects && !this.isover ? \"isover\" : null;\n        if (!c) {\n          return;\n        }\n        if (this.options.greedy) {\n          // find droppable parents with same scope\n          scope = this.options.scope;\n          parent = this.element.parents(\":data(ui-droppable)\").filter(function () {\n            return $(this).droppable(\"instance\").options.scope === scope;\n          });\n          if (parent.length) {\n            parentInstance = $(parent[0]).droppable(\"instance\");\n            parentInstance.greedyChild = c === \"isover\";\n          }\n        }\n\n        // We just moved into a greedy child\n        if (parentInstance && c === \"isover\") {\n          parentInstance.isover = false;\n          parentInstance.isout = true;\n          parentInstance._out.call(parentInstance, event);\n        }\n        this[c] = true;\n        this[c === \"isout\" ? \"isover\" : \"isout\"] = false;\n        this[c === \"isover\" ? \"_over\" : \"_out\"].call(this, event);\n\n        // We just moved out of a greedy child\n        if (parentInstance && c === \"isout\") {\n          parentInstance.isout = false;\n          parentInstance.isover = true;\n          parentInstance._over.call(parentInstance, event);\n        }\n      });\n    },\n    dragStop: function (draggable, event) {\n      draggable.element.parentsUntil(\"body\").off(\"scroll.droppable\");\n\n      // Call prepareOffsets one final time since IE does not fire return scroll events when\n      // overflow was caused by drag (see #5003)\n      if (!draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      }\n    }\n  };\n\n  // DEPRECATED\n  // TODO: switch return back to widget declaration at top of file when this is removed\n  if ($.uiBackCompat !== false) {\n    // Backcompat for activeClass and hoverClass options\n    $.widget(\"ui.droppable\", $.ui.droppable, {\n      options: {\n        hoverClass: false,\n        activeClass: false\n      },\n      _addActiveClass: function () {\n        this._super();\n        if (this.options.activeClass) {\n          this.element.addClass(this.options.activeClass);\n        }\n      },\n      _removeActiveClass: function () {\n        this._super();\n        if (this.options.activeClass) {\n          this.element.removeClass(this.options.activeClass);\n        }\n      },\n      _addHoverClass: function () {\n        this._super();\n        if (this.options.hoverClass) {\n          this.element.addClass(this.options.hoverClass);\n        }\n      },\n      _removeHoverClass: function () {\n        this._super();\n        if (this.options.hoverClass) {\n          this.element.removeClass(this.options.hoverClass);\n        }\n      }\n    });\n  }\n  return $.ui.droppable;\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}