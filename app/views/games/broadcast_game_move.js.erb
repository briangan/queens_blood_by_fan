<%
=begin
  Instead of individual updates to multiple components via JS like create_game_move.js.erb, 
  this uses ActionCable to pass onto all subscribers then 2 higher level components: players_and_turn, game_board, 
  and calls the few necessary JS functions to update the UI.
=end
  # Erase cached game_board_tiles
  @game = Game.includes(:game_users, :game_board_tiles => [:current_card]).find(params[:id])
  players_and_turn_content = render 'games/players_and_current_turn', game: @game
  ActionCable.server.broadcast("game_#{@game.id}_channel", { action: "update_board", selector: "#game_current_player_frame", html: players_and_turn_content })

  board_content = render partial:'board', locals:{ game: @game }
  show_board_notice_s = ''
  flash.to_hash.each_pair do|t, m|
    show_board_notice_s += "showBoardNotice('#{ j m }', '#{ t }'); "
  end
  ActionCable.server.broadcast("game_#{@game.id}_channel", { action: "update_board", selector: "#game_board_frame", html: board_content, js: "setupBoardInteractions(); switchTurnToPlayer(#{@game.current_turn_user_id}, #{@game.current_turn_player_number}); #{show_board_notice_s}" })
-%>
