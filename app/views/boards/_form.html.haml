:ruby
  # Required locals:
  #   board <Board>

:css
  .board-tile-cell {
    width: 50px;
    height: 50px;
    text-align: center;
    vertical-align: middle;
    border: 2px solid lightgray;
    margin-left: 2px;
  }
  .board-tile-cell:hover {
    border: solid 3px #3366cc;
  }
  .board-tile-checkbox {
    width: 30px;
    height: 30px;
  }
:javascript
  /* The rotation of the tile for which user: none, user 1, user 2, then back to none 
  */
  function toggleTileUser() {
    let v = $(this).val();
    let currentSelectedUserNumber = $('input[name="current_user_number"]:checked').val();
    var nextV = currentSelectedUserNumber;
    if (typeof(nextV) == 'undefined' || nextV == '' || nextV == 'on') {
      nextV = '1';
    } else if (nextV && (typeof(nextV) == 'undefined' || nextV == '' || nextV == 'on') ) {
      nextV = '1';
    } else if (v == '1') {
      nextV = '2';
    } else if (v == '2') {
      nextV = '';
    }
    $(this).val(nextV);
    // console.log("| " + $(this).attr('id') + " | selected " + currentSelectedUserNumber + ", "+ v + " -> " + nextV);

    renderBoardTileCell(this);

    // Synch the radio button choice
    if (nextV == '') {
      $('input[name="current_user_number"][value]').prop('checked', false)
    } else {
      $('input[name="current_user_number"][value="' + nextV + '"]').prop('checked', true);
    }
  }


  /*
    @return <String> '1', '2' or ''
  */
  function renderBoardTileCell(checkBox){
    var v = $(checkBox).val();
    
    if (v == '1') {
      $(checkBox).parent().removeClass('user-2-bg-color').addClass('user-1-bg-color');
      $(checkBox).prop('checked', true);
    } else if (v == '2') {
      $(checkBox).parent().removeClass('user-1-bg-color').addClass('user-2-bg-color');
      $(checkBox).prop('checked', true);
    } else {
      $(checkBox).parent().removeClass('user-1-bg-color').removeClass('user-2-bg-color');
      $(checkBox).prop('checked', false);
    }
    return v;
  }

  function renderAllBoardTileCells() {
    const checkboxes = document.querySelectorAll('input.board-tile-checkbox');
    checkboxes.forEach(checkbox => {
      renderBoardTileCell( $(checkbox) );
    });
  }

  function generateBoardTilesTable() {
    // deletes all rows in the tables
    const boardTilesTable = document.querySelector('#board_tiles_table tbody');
    if (boardTilesTable) {
      boardTilesTable.innerHTML = '';
      var boardColumns = parseInt(document.querySelector('#board_form input[name="board[columns]"]').value);
      var boardRows = parseInt(document.querySelector('#board_form input[name="board[rows]"]').value);
      // Generate the table rows and cells
      for (let row = 1; row <= boardRows; row++) {
        const tr = document.createElement('tr');
        for (let col = 1; col <= boardColumns; col++) {
          const td = document.createElement('td');
          td.className = 'board-tile-cell';
          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.className = 'board-tile-checkbox';
          checkbox.id = `board_tile_${col}_${row}`;
          checkbox.name = `board_tiles[board_tile_at_${col}_${row}]`;
          checkbox.value = '';
          checkbox.dataset.bsToggle = 'tooltip';
          checkbox.dataset.bsTitle = `Tile at ${col},${row}`;
          checkbox.addEventListener('change', toggleTileUser);
          td.appendChild(checkbox);
          checkbox.value = '';
          renderBoardTileCell(checkbox);
          tr.appendChild(td);
        }
        boardTilesTable.appendChild(tr);
      }
    }
  }

  $( function() {
    renderAllBoardTileCells();

    $('#board_form input[name="board[columns]"]').on('change', function() {
        generateBoardTilesTable();
      });
    $('#board_form input[name="board[rows]"]').on('change', function() {
        generateBoardTilesTable();
      });

    $('.board-tile-checkbox').on('change', function() {
        toggleTileUser.call(this);
      });
  });
-#%pre= bt_matrix.to_yaml
= form_for @board, remote: !@board.new_record?, html:{ id:'board_form' } do |f|
  = hidden_field_tag(:format, :js) if @board&.id
  - if board.errors.any?
    #error_explanation
      %h2= "#{pluralize(board.errors.count, "error")} prohibited this board from being saved:"
      %ul
        - board.errors.full_messages.each do |message|
          %li= message
  .row
    .col-md-4.col-sm-6
      %div(class="form-group input-group mb-3")
        %span(class="input-group-text") 
          Columns
        = f.number_field :columns, class: 'form-control', placeholder: 'Columns', required: true
        %span(class="input-group-text") 
          Rows
        = f.number_field :rows, class: 'form-control', placeholder: 'Rows', required: true
  %div(class="form-group input-group mb-3")
    %label(for="current_user_number" class="input-group-text") 
      Choose which user for the tiles
    %input(type="radio" class="btn-check" name="current_user_number" id="current_user_number_option_1" value="1" autocomplete="off")
    %label(for="current_user_number_option_1" class="btn user-1-bg-color") User 1

    %input(type="radio" class="btn-check" name="current_user_number" id="current_user_number_option_2" value="2" autocomplete="off")
    %label(for="current_user_number_option_2" class="btn user-2-bg-color") User 2
  %div(class="form-group input-group mb-3")
    = turbo_frame_tag 'board_tiles_table_frame' do
      = render 'boards/board_tiles_table', board: board
  .actions
    %button(type='submit' class='btn btn-primary' data-disable-with='Saving...')
      %i.bi.bi-floppy-fill
      Save