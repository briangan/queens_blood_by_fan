:ruby
  # Reference guides:
  # https://api.jqueryui.com/draggable/
  # https://codepen.io/wedugo/pen/yjVvBg
  col_count = 5
  row_count = 3
  cards_per_player_count = 4 ######### 15

- content_for :more_head do
  :css
    :root {
      --player-1-color: #44a1fe;
      --player-2-color: #a71528;
      --highlight-card-border-color: #73eac3;
      --highlight-tile-background-color: #bed5cb;
      --tile-card-width: 156px;
      --tile-card-height: 208px
    }
    .board-wrapper {
      background-color: #999999;
      text-align: center;
    }
    .board-tile {
      width: var(--tile-card-width);
      height: var(--tile-card-height);
      display: inline-block;
      border: 0;
      margin: 0;
      padding: 0;
      text-align: center;
    }
    .board-tile-odd {
      background-color: #4d5878;
    }
    .board-tile-even {
      background-color: #c4daef;
    }
    .board-tile[data-claiming-player="1"] {
      background-color: var(--player-1-color);
      border-color: var(--player-1-color);
    }
    .board-tile[data-claiming-player="2"] {
      background-color: var(--player-2-color);
      border-color: var(--player-2-color);
    }
    .board-tile > .card-wrapper {
      width: 100%;
      height: 100%;
      margin: 0;
      opacity: 0.8;
    }
    .card .card-extra-image {
      overflow: hidden;
    }
    .card .card-extra-image img {
      width: 544px;
      position: relative;
      left: -36px;
      top: -28px;
    }
    .card .bi {
      font-size: 4em;
      color: #e0e0e0;
      opacity: 0.7;
      position: relative;
    }
    .card {
      width: var(--tile-card-width);
      height: var(--tile-card-height);
      border-width: 0.4em;
      margin: 0.2em 0.1em;
      cursor: grab;
      float: left;
      text-align: center;
      overflow: hidden;
    }
    .card > image {
      width: auto;
      max-width: 100%;
    }
    .card[data-player="1"] {
      border-color: var(--player-1-color);
    }
    .card[data-player="2"] {
      border-color: var(--player-2-color);
    }
    .card-dropped {
      background: transparent;
      position: relative !important;
      margin: 0 !important;
      top: 0 !important;
      left: 0 !important;
      max-width: 100% !important;
      max-height: 100% !important;
    }
    .card-drop-hover[data-player="1"] {
      background-color: #d0e0ff;
    }
    .card-drop-hover[data-player="2"] {
      background-color: #ffe0e0;
    }
    .highlight-tile .card {
      border-color: var(--highlight-card-border-color);
    }
    .highlight-tile {
      background-color: var(--highlight-tile-background-color);
    }
    .center-tile > .card-wrapper {
      border: solid 0.4em #ddc568;
      background-color: #e0e0e0;
    }

  :javascript
    function isCardAcceptableToTile(card, tile) {
      /////////console.log("Card accept? " + card.data('player') + " vs " + tile.data('claiming-player') );
      /////////return card.data('player') == tile.data('claiming-player');
      return true;
    }
    function shouldDragRevertDragToTile() {
      //////////console.log("Should revert? " + $(this).attr('id') + " w/ " + $(this).attr('class') );
      return !$(this).hasClass('card-dropped');
    }
    function shouldAcceptDrop(ui) {
      var shouldAccept = isCardAcceptableToTile( ui.draggable, $(this));
      ////// console.log("Card accept? " + $(ui).attr("data-player") + " vs " + $(this).attr("data-claiming-player") + " => " + shouldAccept);
      return shouldAccept;
    }
    function dropCardHandler(event, ui) {
      var shouldAccept = isCardAcceptableToTile( ui.draggable, $(this));
      /////// console.log("Card dropped " + ui.draggable.attr('id') + " on " + $(this).attr('id') + " => "+ shouldAccept );

      if (shouldAccept) {
        ui.draggable.data('board-tile-id', $(this).attr('id') );
        ui.draggable.draggable( 'disable' );
        //$(this).droppable( 'disable' );
        //ui.draggable.position( { of: $(this), my: 'left top', at: 'left top' } );
        $(this).html('');
        $(ui.draggable).detach().appendTo( $(this) );
        ui.draggable.addClass('card-dropped');

        ui.draggable.draggable( 'option', 'revert', false );

        $(this).attr('data-claiming-player', ui.draggable.data('player') );
      }
    }
    function previewCardPlacementEffect(board, whichTile, pawnTiles) {
      console.log("Preview card placement effect on " + whichTile.attr('id') + " @ " + whichTile.data('tile-position') + ' vs pawnTiles: '+ pawnTiles);
      whichTile.addClass('center-tile');
      pawnTiles.forEach(function(pawnTile) {
        var col = parseInt(whichTile.data('tile-position').split(',')[0]) + pawnTile[0];
        var row = parseInt(whichTile.data('tile-position').split(',')[1]) + pawnTile[1];
        var targetTile = board.find('.board-tile[data-tile-position="' + col + ',' + row + '"]');
        if (targetTile.length > 0) {
          targetTile.addClass('highlight-tile');
          targetTile.children('.card').addClass('highlight-tile');
        }
      } );
    }
    function testPreviewCardPlacementEffect() {
      var board = $(".board-wrapper").first();
      var boardTile = $(".board-tile[data-tile-position='1,2']").first();
      previewCardPlacementEffect(board, boardTile, [[0, 1], [1, 0], [0, -1], [-1, 0]] );
      setTimeout(function() {
        board.find('.highlight-tile').removeClass('highlight-tile');
        board.find('.center-tile').removeClass('center-tile');
      }, 5000);
    }

    $(function() {
      $(".draggable").draggable({ 
        "opacity": 0.35, revert: false,
        snap: ".board-tile", snapMode: "inner", snapTolerance: 30,
        stack: ".card-wrapper div",
        revert: shouldDragRevertDragToTile
      });
      $(".droppable").droppable({
        hoverClass: "card-drop-hover",
        accept: '.card',
        drop: dropCardHandler, 
        over: function(event, ui) {
          /////// console.log("Card over " + $(this).attr('id'));
          //$(ui.draggable).children(".bi").removeClass('d-none');
          $(this).addClass('center-tile-background-color').addClass('center-tile-card-border-color');
        },
        out: function(event, ui) {
          /////// console.log("Card out " + $(this).attr('id'));
          //$(ui.draggable).children(".bi").addClass('d-none');
          $(this).removeClass('center-tile-background-color').removeClass('center-tile-card-border-color');
        }
      });
    });

    /* $(document).on("dragstart", "card", function (event) {
      console.log("Card dragging " + $(this).attr('id') );

    }); */
    $(document).on("dragstop", ".card", function (event) {
      $(this).children(".bi").addClass('d-none');
    });

%h1= app_name

:ruby
  ## Pick random cards for each player
.row
  .col.card-wrapper
    - card_numbers_1 = (1..145).to_a ####### .shuffle
    - 0.upto(cards_per_player_count - 1) do |i|
      = render 'cards/card', card: Card.new(card_number: card_numbers_1[i]), which_player: 1
    .clearfix
  .col.card-wrapper
    - card_numbers_2 = (1..145).to_a #### .shuffle
    - 0.upto(cards_per_player_count - 1) do |i|
      = render 'cards/card', card: Card.new(card_number: card_numbers_2[i]), which_player: 2
    .clearfix
%hr
.board-wrapper
  - board_tile_index = 0
  - 1.upto(row_count) do |row|
    %div(class="board-row")
      - 1.upto(col_count) do |col|
        - board_tile_index += 1
        %div(class="board-tile #{board_tile_index % 2 == 1 ? 'board-tile-odd' : 'board-tile-even'} droppable" id="board_tile_#{col}_#{row}" data-tile-position="#{col},#{row}")
          .card-wrapper #{col}, #{row}


