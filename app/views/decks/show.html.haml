- add_to_javascript_packs 'cards'

.container
  %h4
    Name: 
    = best_in_place @deck, :name, class:'bg-subtle-gray p-2', ok_button:'Update', ok_button_class: 'btn btn-primary btn-sm m-1', cancel_button:' x ', cancel_button_class: 'btn btn-secondary btn-sm m-1', 'data-bs-toggle':'tooltip', 'data-bs-title': 'Click to Edit', 'data-bs-placement': 'bottom'
  %br/
  = form_tag(select_deck_cards_deck_path(@deck), method: :put, id: 'deck_form', class: 'form-inline', remote: true) do
    - 1.upto(Deck::MAX_CARDS_PER_DECK) do |i|
      = hidden_field_tag "card_ids[]", nil, id:"card_id_input_#{i}", class:'deck-card-id'

    = render 'deck_nav_tabs'
    %div(class="border border-info bg-subtle-gray p-2" style="border-width: 0.2em !important;")
      %p 
        %span(id="max_cards_per_deck_note") Max #{Deck::MAX_CARDS_PER_DECK} cards per deck &nbsp;
        = submit_tag('Update Deck', class: 'btn btn-sm btn-primary', data:{ disable_with: 'Updating...'} )
      %div(id='deck_cards_wrapper' class="droppable ui-droppable small-card border w-100 text-start" data-player="1")
        = render partial:'user_cards/user_card', collection: @deck.cards.collect{|c| UserCard.new(card: c, card_id: c.id, quantity: 1) }, as: :user_card, locals:{ which_player: 1, card_css_class: "card small-card-with-note d-inline-flex", show_remove_button: true, show_add_button: false }
        .clearfix
%br/
.container
  %h4 
    %bi.bi-arrow-up-circle-fill.text-info
    Choose From Your Collection
  .card-wrapper.bg-secondary.p-2(id="user_cards_wrapper")
    - user_cards_after_deck_changes(current_user.user_cards.includes(:card).all, @deck).each do |user_card|
      - next if user_card.card.nil?
      = render 'user_cards/user_card', user_card: user_card, card_css_class: "card small-card-with-note d-inline-flex", show_remove_button: false, show_add_button: true
    .clearfix